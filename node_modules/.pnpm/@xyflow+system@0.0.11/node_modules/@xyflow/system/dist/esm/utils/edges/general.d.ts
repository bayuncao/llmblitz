import { Connection, Transform } from '../..';
import { EdgeBase, NodeBase } from '../../types';
export declare function getEdgeCenter({ sourceX, sourceY, targetX, targetY, }: {
    sourceX: number;
    sourceY: number;
    targetX: number;
    targetY: number;
}): [number, number, number, number];
export type GroupedEdges<EdgeType extends EdgeBase> = {
    edges: EdgeType[];
    level: number;
    isMaxLevel: boolean;
};
export declare function groupEdgesByZLevel<EdgeType extends EdgeBase>(edges: EdgeType[], nodeLookup: Map<string, NodeBase>, elevateEdgesOnSelect?: boolean): GroupedEdges<EdgeType>[];
type IsEdgeVisibleParams = {
    sourceNode: NodeBase;
    targetNode: NodeBase;
    width: number;
    height: number;
    transform: Transform;
};
export declare function isEdgeVisible({ sourceNode, targetNode, width, height, transform }: IsEdgeVisibleParams): boolean;
export declare const addEdgeBase: <EdgeType extends EdgeBase<any>>(edgeParams: Connection | EdgeType, edges: EdgeType[]) => EdgeType[];
export type UpdateEdgeOptions = {
    shouldReplaceId?: boolean;
};
export declare const updateEdgeBase: <EdgeType extends EdgeBase<any>>(oldEdge: EdgeType, newConnection: Connection, edges: EdgeType[], options?: UpdateEdgeOptions) => EdgeType[];
export {};
//# sourceMappingURL=general.d.ts.map