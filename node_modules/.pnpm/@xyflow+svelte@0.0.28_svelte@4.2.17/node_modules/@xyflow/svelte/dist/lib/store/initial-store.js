import { readable, writable } from 'svelte/store';
import { infiniteExtent, SelectionMode, ConnectionMode, ConnectionLineType, devWarn, updateNodes, getNodesBounds, getViewportForBounds } from '@xyflow/system';
import DefaultNode from '../components/nodes/DefaultNode.svelte';
import InputNode from '../components/nodes/InputNode.svelte';
import OutputNode from '../components/nodes/OutputNode.svelte';
import GroupNode from '../components/nodes/GroupNode.svelte';
import BezierEdge from '../components/edges/BezierEdge.svelte';
import StraightEdge from '../components/edges/StraightEdge.svelte';
import SmoothStepEdge from '../components/edges/SmoothStepEdge.svelte';
import StepEdge from '../components/edges/StepEdge.svelte';
import { createNodesStore, createEdgesStore } from './utils';
import { initConnectionProps } from './derived-connection-props';
export const initialNodeTypes = {
    input: InputNode,
    output: OutputNode,
    default: DefaultNode,
    group: GroupNode
};
export const initialEdgeTypes = {
    straight: StraightEdge,
    smoothstep: SmoothStepEdge,
    default: BezierEdge,
    step: StepEdge
};
export const getInitialStore = ({ nodes = [], edges = [], width, height, fitView }) => {
    const nodeLookup = new Map();
    const nextNodes = updateNodes(nodes, nodeLookup, {
        nodeOrigin: [0, 0],
        elevateNodesOnSelect: false
    });
    let viewport = { x: 0, y: 0, zoom: 1 };
    if (fitView && width && height) {
        const nodesWithDimensions = nextNodes.filter((node) => node.width && node.height);
        const bounds = getNodesBounds(nodesWithDimensions, [0, 0]);
        viewport = getViewportForBounds(bounds, width, height, 0.5, 2, 0.1);
    }
    return {
        flowId: writable(null),
        nodes: createNodesStore(nextNodes, nodeLookup),
        nodeLookup: readable(nodeLookup),
        visibleNodes: readable([]),
        edges: createEdgesStore(edges),
        edgeTree: readable([]),
        height: writable(500),
        width: writable(500),
        minZoom: writable(0.5),
        maxZoom: writable(2),
        nodeOrigin: writable([0, 0]),
        nodeDragThreshold: writable(0),
        nodeExtent: writable(infiniteExtent),
        translateExtent: writable(infiniteExtent),
        autoPanOnNodeDrag: writable(true),
        autoPanOnConnect: writable(true),
        fitViewOnInit: writable(false),
        fitViewOnInitDone: writable(false),
        fitViewOptions: writable(undefined),
        panZoom: writable(null),
        snapGrid: writable(null),
        dragging: writable(false),
        selectionRect: writable(null),
        selectionKeyPressed: writable(false),
        multiselectionKeyPressed: writable(false),
        deleteKeyPressed: writable(false),
        panActivationKeyPressed: writable(false),
        zoomActivationKeyPressed: writable(false),
        selectionRectMode: writable(null),
        selectionMode: writable(SelectionMode.Partial),
        nodeTypes: writable(initialNodeTypes),
        edgeTypes: writable(initialEdgeTypes),
        viewport: writable(viewport),
        connectionMode: writable(ConnectionMode.Strict),
        domNode: writable(null),
        connection: readable(initConnectionProps),
        connectionLineType: writable(ConnectionLineType.Bezier),
        connectionRadius: writable(20),
        isValidConnection: writable(() => true),
        nodesDraggable: writable(true),
        nodesConnectable: writable(true),
        elementsSelectable: writable(true),
        selectNodesOnDrag: writable(true),
        markers: readable([]),
        defaultMarkerColor: writable('#b1b1b7'),
        lib: readable('svelte'),
        onlyRenderVisibleElements: writable(false),
        onerror: writable(devWarn),
        ondelete: writable(undefined)
    };
};
