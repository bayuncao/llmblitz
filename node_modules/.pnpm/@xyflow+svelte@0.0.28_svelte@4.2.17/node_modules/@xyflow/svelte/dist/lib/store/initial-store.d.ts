/// <reference types="svelte" />
import { SelectionMode, ConnectionMode, ConnectionLineType, type SelectionRect, type SnapGrid, type MarkerProps, type PanZoomInstance, type CoordinateExtent, type IsValidConnection, type GroupedEdges, type NodeOrigin, type OnError, type Viewport } from '@xyflow/system';
import DefaultNode from '../components/nodes/DefaultNode.svelte';
import InputNode from '../components/nodes/InputNode.svelte';
import OutputNode from '../components/nodes/OutputNode.svelte';
import GroupNode from '../components/nodes/GroupNode.svelte';
import BezierEdge from '../components/edges/BezierEdge.svelte';
import StraightEdge from '../components/edges/StraightEdge.svelte';
import SmoothStepEdge from '../components/edges/SmoothStepEdge.svelte';
import StepEdge from '../components/edges/StepEdge.svelte';
import type { NodeTypes, EdgeTypes, EdgeLayouted, Node, Edge, FitViewOptions, OnDelete } from '../types';
import { type ConnectionProps } from './derived-connection-props';
export declare const initialNodeTypes: {
    input: typeof InputNode;
    output: typeof OutputNode;
    default: typeof DefaultNode;
    group: typeof GroupNode;
};
export declare const initialEdgeTypes: {
    straight: typeof StraightEdge;
    smoothstep: typeof SmoothStepEdge;
    default: typeof BezierEdge;
    step: typeof StepEdge;
};
export declare const getInitialStore: ({ nodes, edges, width, height, fitView }: {
    nodes?: Node[] | undefined;
    edges?: Edge[] | undefined;
    width?: number | undefined;
    height?: number | undefined;
    fitView?: boolean | undefined;
}) => {
    flowId: import("svelte/store").Writable<string | null>;
    nodes: {
        subscribe: (this: void, run: import("svelte/store").Subscriber<Node[]>) => import("svelte/store").Unsubscriber;
        update: (this: void, updater: import("svelte/store").Updater<Node[]>) => void;
        set: (this: void, value: Node[]) => Node[];
        setDefaultOptions: (opts: Partial<Omit<Node<any, string | undefined>, "id">>) => void;
        setOptions: (opts: import("./utils").NodeStoreOptions) => void;
    };
    nodeLookup: import("svelte/store").Readable<Map<string, Node>>;
    visibleNodes: import("svelte/store").Readable<Node[]>;
    edges: import("svelte/store").Writable<Edge[]> & {
        setDefaultOptions: (opts: import("../types").DefaultEdgeOptions) => void;
    };
    edgeTree: import("svelte/store").Readable<GroupedEdges<EdgeLayouted>[]>;
    height: import("svelte/store").Writable<number>;
    width: import("svelte/store").Writable<number>;
    minZoom: import("svelte/store").Writable<number>;
    maxZoom: import("svelte/store").Writable<number>;
    nodeOrigin: import("svelte/store").Writable<NodeOrigin>;
    nodeDragThreshold: import("svelte/store").Writable<number>;
    nodeExtent: import("svelte/store").Writable<CoordinateExtent>;
    translateExtent: import("svelte/store").Writable<CoordinateExtent>;
    autoPanOnNodeDrag: import("svelte/store").Writable<boolean>;
    autoPanOnConnect: import("svelte/store").Writable<boolean>;
    fitViewOnInit: import("svelte/store").Writable<boolean>;
    fitViewOnInitDone: import("svelte/store").Writable<boolean>;
    fitViewOptions: import("svelte/store").Writable<FitViewOptions>;
    panZoom: import("svelte/store").Writable<PanZoomInstance | null>;
    snapGrid: import("svelte/store").Writable<SnapGrid | null>;
    dragging: import("svelte/store").Writable<boolean>;
    selectionRect: import("svelte/store").Writable<SelectionRect | null>;
    selectionKeyPressed: import("svelte/store").Writable<boolean>;
    multiselectionKeyPressed: import("svelte/store").Writable<boolean>;
    deleteKeyPressed: import("svelte/store").Writable<boolean>;
    panActivationKeyPressed: import("svelte/store").Writable<boolean>;
    zoomActivationKeyPressed: import("svelte/store").Writable<boolean>;
    selectionRectMode: import("svelte/store").Writable<string | null>;
    selectionMode: import("svelte/store").Writable<SelectionMode>;
    nodeTypes: import("svelte/store").Writable<NodeTypes>;
    edgeTypes: import("svelte/store").Writable<EdgeTypes>;
    viewport: import("svelte/store").Writable<Viewport>;
    connectionMode: import("svelte/store").Writable<ConnectionMode>;
    domNode: import("svelte/store").Writable<HTMLDivElement | null>;
    connection: import("svelte/store").Readable<ConnectionProps>;
    connectionLineType: import("svelte/store").Writable<ConnectionLineType>;
    connectionRadius: import("svelte/store").Writable<number>;
    isValidConnection: import("svelte/store").Writable<IsValidConnection>;
    nodesDraggable: import("svelte/store").Writable<boolean>;
    nodesConnectable: import("svelte/store").Writable<boolean>;
    elementsSelectable: import("svelte/store").Writable<boolean>;
    selectNodesOnDrag: import("svelte/store").Writable<boolean>;
    markers: import("svelte/store").Readable<MarkerProps[]>;
    defaultMarkerColor: import("svelte/store").Writable<string>;
    lib: import("svelte/store").Readable<string>;
    onlyRenderVisibleElements: import("svelte/store").Writable<boolean>;
    onerror: import("svelte/store").Writable<OnError>;
    ondelete: import("svelte/store").Writable<OnDelete>;
};
