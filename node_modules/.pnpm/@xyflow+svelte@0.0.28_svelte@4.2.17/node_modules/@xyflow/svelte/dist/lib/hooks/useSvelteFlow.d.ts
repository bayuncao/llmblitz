import { type Writable } from 'svelte/store';
import { type FitBoundsOptions, type SetCenterOptions, type Viewport, type ViewportHelperFunctionOptions, type XYPosition, type ZoomInOut, type Rect } from '@xyflow/system';
import type { Edge, FitViewOptions, Node } from '../types';
export declare function useSvelteFlow(): {
    zoomIn: ZoomInOut;
    zoomOut: ZoomInOut;
    setZoom: (zoomLevel: number, options?: ViewportHelperFunctionOptions) => void;
    getZoom: () => number;
    setCenter: (x: number, y: number, options?: SetCenterOptions) => void;
    setViewport: (viewport: Viewport, options?: ViewportHelperFunctionOptions) => void;
    getViewport: () => Viewport;
    fitView: (options?: FitViewOptions) => void;
    getIntersectingNodes: (nodeOrRect: Node | {
        id: Node['id'];
    } | Rect, partially?: boolean, nodesToIntersect?: Node[]) => Node[];
    isNodeIntersecting: (nodeOrRect: Node | {
        id: Node['id'];
    } | Rect, area: Rect, partially?: boolean) => boolean;
    fitBounds: (bounds: Rect, options?: FitBoundsOptions) => void;
    deleteElements: (nodesToRemove?: (Node | {
        id: Node['id'];
    })[], edgesToRemove?: (Edge | {
        id: Edge['id'];
    })[]) => {
        deletedNodes: Node[];
        deletedEdges: Edge[];
    };
    screenToFlowPosition: (position: XYPosition) => XYPosition;
    flowToScreenPosition: (position: XYPosition) => XYPosition;
    viewport: Writable<Viewport>;
    getConnectedEdges: (id: string | (Node | {
        id: Node['id'];
    })[]) => Edge[];
    getIncomers: (node: string | Node | {
        id: Node['id'];
    }) => Node[];
    getOutgoers: (node: string | Node | {
        id: Node['id'];
    }) => Node[];
    toObject: () => {
        nodes: Node[];
        edges: Edge[];
        viewport: Viewport;
    };
};
